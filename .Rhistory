knitr::opts_chunk$set(echo = TRUE)
rho.coef
m.rho <- lm(log(rho) ~ Temp, data = par.estim)
m.kappa <- lm(log(kappa) ~ Temp + Temp^2, data = par.estim)
par(mfrow = c(2,2))
plot(m.rho)
plot(m.kappa)
rho.coef <- coef(m.rho)
kappa.coef <- coef(m.kappa)
coef.pk <- data.frame(par = c("ap", "Bp", "ak", "Bk"),
valor = c(rho.coef, kappa.coef))
knitr::kable(coef.pk)
datos.nuevos <- expand.grid(Tiempo = seq(0, 1000, len = 100),
Temp = seq(4, 56, len = 100))
knitr::kable(head(datos.nuevos))
weib <- function(Tiempo = NA, Temp = NA, pars = NA){
ap <- pars$ap
Bp <- pars$Bp
ak <- pars$ak
Bk <- pars$Bk
p <- exp(ap + Bp * Temp)
k <- exp(ak + Bk * Temp)
S <- exp(- (p * Tiempo) ^ k)
return(S)
}
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
preds <- weib(Tiempo = datos.nuevos$Tiempo,
Temp = datos.nuevos$Temp,
pars = )
preds <- weib(Tiempo = datos.nuevos$Tiempo,
Temp = datos.nuevos$Temp,
pars = pars)
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
Sup <- weib(Tiempo = datos.nuevos$Tiempo,
Temp = datos.nuevos$Temp,
pars = pars)
datos.nuevos$Sup <- Sup
library(lattice)
wireframe(Sup ~ Temp + Tiempo, data = datos.nuevos)
datos.nuevos <- expand.grid(Tiempo = seq(0, 1000, len = 50),
Temp = seq(4, 56, len = 50))
knitr::kable(head(datos.nuevos))
weib <- function(Tiempo = NA, Temp = NA, pars = NA){
ap <- pars$ap
Bp <- pars$Bp
ak <- pars$ak
Bk <- pars$Bk
p <- exp(ap + Bp * Temp)
k <- exp(ak + Bk * Temp)
S <- exp(- (p * Tiempo) ^ k)
return(S)
}
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
Sup <- weib(Tiempo = datos.nuevos$Tiempo,
Temp = datos.nuevos$Temp,
pars = pars)
datos.nuevos$Sup <- Sup
wireframe(Sup ~ Temp + Tiempo, data = datos.nuevos,
drape = T)
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T)
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, arrows = F)
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = T)
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = list(arrows = F))
library(lattice)
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = list(arrows = F),
screen = list(z = 20,
x = -70,
y = 3))
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = list(arrows = F),
screen = list(z = 20,
x = 70,
y = 3))
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = list(arrows = F),
screen = list(z = 20,
x = -10,
y = 3))
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = list(arrows = F),
screen = list(z = 20,
x = 0,
y = 3))
levelplot(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T)
library(lattice)
levelplot(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T)
library(lattice)
levelplot(log10(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T)
write.csv(coef.pk, "Nicho/Coeficientes-pk.csv", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
library(terra)
bio1 <- rast("Nicho/Bio1.tif")
coef <- read.csv("Nicho/Coeficientes-pk.csv")
source("Nicho/weibull.R")
library(terra)
bio1 <- rast("Nicho/Bio1.tif")
plot(bio1)
bio1.df <- as.data.frame(bio1, xy = T)
Sup.bio1 <- weib(Tiempo = 720,
Temp = bio1.df$Bio1,
pars = pars)
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
coef <- read.csv("Nicho/Coeficientes-pk.csv") #Importando coeficientes
source("Nicho/weibull.R") #Importando la función
bio1.df <- as.data.frame(bio1, xy = T)
pars <- as.list(coef.pk$valor)
coef.pk <- read.csv("Nicho/Coeficientes-pk.csv") #Importando coeficientes
source("Nicho/weibull.R") #Importando la función
bio1.df <- as.data.frame(bio1, xy = T)
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
Sup.bio1 <- weib(Tiempo = 720,
Temp = bio1.df$Bio1,
pars = pars)
bio1.df$Sup <- Sup.bio1
Sup.r <- rast(bio1.df[, -3])
plot(Sup.r)
curve(15 + 10 * cos(pi * x)^2, from = 0, to = 12)
curve(15 + 10 * cos(pi * x/12)^2, from = 0, to = 12)
curve(15 + 10 * cos(pi * x/12)^2, from = 0, to = 720)
curve(15 + 10 * cos(pi * x/720)^2, from = 0, to = 720)
curve(15 + 10 * cos(pi * x/360)^2, from = 0, to = 720)
curve(15 + 10 * cos(pi * x/1440)^2, from = 0, to = 720)
curve(15 + 10 * cos(-pi * x/1440)^2, from = 0, to = 720)
curve(15 + 10 * cos(-pi * x/1440)^2, from = 0, to = 720)
curve(cos(pi * x/1440)^2, from = 0, to = 720)
curve(15 + 10 * sin(pi * x/1440)^2, from = 0, to = 720)
curve(15 + 10 * cos(pi/2 * x/1440)^2, from = 0, to = 720)
curve(15 + 10 * cos(pi * x/720)^2, from = 0, to = 720)
curve(35 - 10 * cos(pi * x/1440)^2, from = 0, to = 720)
curve(35 - 10 * cos(pi * x/1440)^2, from = 0, to = 1440)
Tmax <- rast("Nicho/Tmax-01.tif")
Tmin <- rast("Nicho/Tmin-01.tif")
Tdif <- Tmax - Tmin
Tmax.df <- as.data.frame(Tmax, xy = T)
Tdif.df <- as.data.frame(Tdif, xy = F)
head(Tmax.df)
library(doParallel)
registerDoParallel(cores = 24)
nrow(Temps.df)
Tmax <- rast("Nicho/Tmax-01.tif")
Tmin <- rast("Nicho/Tmin-01.tif")
Tdif <- Tmax - Tmin
Tmax.df <- as.data.frame(Tmax, xy = T)
Tdif.df <- as.data.frame(Tdif, xy = F)
Temps.df <- data.frame(Tmax.df, Tdif = Tdif.df$`Tmax-01`)
names(Temps.df) <- c("x", "y", "Tmax", "Tdif")
nrow(Temps.df)
weib.ode <- function(t, y, params){
with(params, {
S <- y
Temp <- Tmax - Tdif * cos(pi * t/1440)^2
rho <- exp(ap + Bp * Temp)
kappa <- exp(ak + Bk * Temp)
dS <- - rho * kappa * (-log(S))^(1 - 1/kappa) * S
list(c(dS))
})
}
i = 1
library(tidyr)
library(doParallel)
registerDoParallel(cores = 24)
params <- pars
params$Tmax <- Temps.df$Tmax[i]
params$Tdif <- Temps.df$Tdif[i]
params
out <- lsoda(y = y, times = t,
func = weib.ode,
parms = params) |> as.data.frame()
library(deSolve)
library(deSolve)
y <- 1
t <- seq(0, 720, length(60))
params <- pars
params$Tmax <- Temps.df$Tmax[i]
params$Tdif <- Temps.df$Tdif[i]
out <- lsoda(y = y, times = t,
func = weib.ode,
parms = params) |> as.data.frame()
out <- lsoda(y = y, times = t,
func = weib.ode,
parms = params)
knitr::opts_chunk$set(echo = TRUE)
datos <- read.csv("Nicho/Datos/HeV-survival.csv")
d.4 <- subset(datos, Temp == 4)
d.22 <- subset(datos, Temp == 22)
d.56 <- subset(datos, Temp == 56)
library(ggplot2)
ggplot(d.4) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "lm")
ggplot(d.22) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "loess")
ggplot(d.56) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "loess")
m4 <- nls(ln.S ~ -( rho * Time )^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
lower = c(0.00001, 0.1),
upper = c(1, 1),
algorithm =  "port")
m22 <- nls(ln.S ~ -( rho * Time )^ (kappa),
data = d.22,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(1, 1),
algorithm =  "port")
m56 <- nls(ln.S ~ -( rho * Time )^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.1, 0.1),
upper = c(105, 1.5),
algorithm =  "port")
par.estim <- data.frame(rbind(coef(m4), coef(m22), coef(m56)))
par.estim$Temp <-c(4, 22, 56)
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(rho))) +
geom_smooth(aes(x = Temp, y = log(rho)), method = "lm")
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(kappa))) +
geom_smooth(aes(x = Temp, y = log(kappa)), method = "lm")
m.rho <- lm(log(rho) ~ Temp, data = par.estim)
m.kappa <- lm(log(kappa) ~ Temp + Temp^2, data = par.estim)
rho.coef <- coef(m.rho)
kappa.coef <- coef(m.kappa)
coef.pk <- data.frame(par = c("ap", "Bp", "ak", "Bk"),
valor = c(rho.coef, kappa.coef))
knitr::kable(coef.pk)
datos.nuevos <- expand.grid(Tiempo = seq(0, 1000, len = 100),
Temp = seq(4, 56, len = 100))
knitr::kable(head(datos.nuevos))
weib <- function(Tiempo = NA, Temp = NA, pars = NA){
ap <- pars$ap
Bp <- pars$Bp
ak <- pars$ak
Bk <- pars$Bk
p <- exp(ap + Bp * Temp)
k <- exp(ak + Bk * Temp)
S <- exp(- (p * Tiempo) ^ k)
return(S)
}
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
Sup <- weib(Tiempo = datos.nuevos$Tiempo,
Temp = datos.nuevos$Temp,
pars = pars)
datos.nuevos$Sup <- Sup
library(lattice)
levelplot(log10(Sup) ~ Tiempo + Temp, data = datos.nuevos,
drape = T)
datos
pars
mod <- nls(ln.S ~ -(exp(ap  + Bp * Temp) * Time)^exp(ak + Bk * Temp),
data = datos,
start = pars,
lower = c(-12, 0.1, -0.5, -0.05),
upper = c(-10, 0.5, 0, 0),
algorithm = "port")
summary(mod)
mod <- nls(ln.S ~ -(exp(ap  + Bp * Temp) * Time)^exp(ak + Bk * Temp),
data = datos,
start = pars,
lower = c(-13, 0.1, -0.6, -0.05),
upper = c(-10, 0.5, 0, 0),
algorithm = "port")
summary(mod)
mod <- nls(ln.S ~ -(exp(ap  + Bp * Temp) * Time)^exp(ak + Bk * Temp),
data = datos,
start = pars,
lower = c(-13, 0.1, -0.9, -0.05),
upper = c(-10, 0.5, 0, 0),
algorithm = "port")
summary(mod)
mod <- nls(ln.S ~ -(exp(ap  + Bp * Temp) * Time)^exp(ak + Bk * Temp),
data = datos,
start = pars,
lower = c(-13, 0.1, -0.9, -0.05),
upper = c(-10, 0.5, 0, 0),
algorithm = "port")
summary(mod)
pars <- as.list(coef(mod))
pars
pars <- as.list(coef(mod))
Sup <- weib(Tiempo = datos.nuevos$Tiempo,
Temp = datos.nuevos$Temp,
pars = pars)
datos.nuevos$Sup <- Sup
library(lattice)
levelplot(log10(Sup) ~ Tiempo + Temp, data = datos.nuevos,
drape = T)
write.csv(as.data.frame(coef(mod)), "Nicho/Coeficientes-pk.csv", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
library(terra)
bio1 <- rast("Nicho/Bio1.tif")
plot(bio1)
coef.pk <- read.csv("Nicho/Coeficientes-pk.csv") #Importando coeficientes
source("Nicho/weibull.R") #Importando la función
datos <- read.csv("Nicho/Datos/HeV-survival.csv")
d.4 <- subset(datos, Temp == 4)
d.22 <- subset(datos, Temp == 22)
d.56 <- subset(datos, Temp == 56)
library(ggplot2)
ggplot(d.4) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "lm")
ggplot(d.22) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "loess")
ggplot(d.56) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "loess")
m4 <- nls(ln.S ~ -( rho * Time )^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
lower = c(0.00001, 0.1),
upper = c(1, 1),
algorithm =  "port")
m22 <- nls(ln.S ~ -( rho * Time )^ (kappa),
data = d.22,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(1, 1),
algorithm =  "port")
m56 <- nls(ln.S ~ -( rho * Time )^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.1, 0.1),
upper = c(105, 1.5),
algorithm =  "port")
par.estim <- data.frame(rbind(coef(m4), coef(m22), coef(m56)))
par.estim$Temp <-c(4, 22, 56)
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(rho))) +
geom_smooth(aes(x = Temp, y = log(rho)), method = "lm")
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(kappa))) +
geom_smooth(aes(x = Temp, y = log(kappa)), method = "lm")
m.rho <- lm(log(rho) ~ Temp, data = par.estim)
m.kappa <- lm(log(kappa) ~ Temp + Temp^2, data = par.estim)
rho.coef <- coef(m.rho)
kappa.coef <- coef(m.kappa)
coef.pk <- data.frame(par = c("ap", "Bp", "ak", "Bk"),
valor = c(rho.coef, kappa.coef))
knitr::kable(coef.pk)
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
mod <- nls(ln.S ~ -(exp(ap  + Bp * Temp) * Time)^exp(ak + Bk * Temp),
data = datos,
start = pars,
lower = c(-13, 0.1, -0.9, -0.05),
upper = c(-10, 0.5, 0, 0),
algorithm = "port")
summary(mod)
library(terra)
bio1 <- rast("Nicho/Bio1.tif")
plot(bio1)
coef.pk <- read.csv("Nicho/Coeficientes-pk.csv") #Importando coeficientes
source("Nicho/weibull.R") #Importando la función
bio1.df <- as.data.frame(bio1, xy = T)
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
Sup.bio1 <- weib(Tiempo = 720,
Temp = bio1.df$Bio1,
pars = pars)
bio1.df$Sup <- Sup.bio1
coef.pk <- read.csv("Nicho/Coeficientes-pk.csv") #Importando coeficientes
source("Nicho/weibull.R") #Importando la función
coef.pk
coef.pk <- read.csv("Nicho/Coeficientes-pk.csv") #Importando coeficientes
source("Nicho/weibull.R") #Importando la función
bio1.df <- as.data.frame(bio1, xy = T)
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
Sup.bio1 <- weib(Tiempo = 720,
Temp = bio1.df$Bio1,
pars = pars)
bio1.df$Sup <- Sup.bio1
Sup.r <- rast(bio1.df[, -3])
plot(Sup.r)
weib.ode <- function(t, y, params){
with(params, {
S <- y
Temp <- Tmax - Tdif * cos(pi * t/1440)^2
rho <- exp(ap + Bp * Temp)
kappa <- exp(ak + Bk * Temp)
dS <- - rho * kappa * (-log(S))^(1 - 1/kappa) * S
list(c(dS))
})
}
Tmax <- rast("Nicho/Tmax-01.tif")
Tmin <- rast("Nicho/Tmin-01.tif")
Tdif <- Tmax - Tmin
Tmax.df <- as.data.frame(Tmax, xy = T)
Tdif.df <- as.data.frame(Tdif, xy = F)
Temps.df <- data.frame(Tmax.df, Tdif = Tdif.df$`Tmax-01`)
names(Temps.df) <- c("x", "y", "Tmax", "Tdif")
library(deSolve)
y <- 1
t <- seq(0, 720, length(720))
library(tidyr)
library(doParallel)
registerDoParallel(cores = 8)
i = 1
params <- pars
params$Tmax <- Temps.df$Tmax[i]
params$Tdif <- Temps.df$Tdif[i]
params
out <- lsoda(y = y, times = t,
func = weib.ode,
parms = params)
out <- euler(y = y, times = t,
func = weib.ode,
parms = params)
out
out <- rk4(y = y, times = t,
func = weib.ode,
parms = params)
out
curve(params$Tmax - params$Tdif * cos(pi * x/1440)^2, 0, 720)
curve(params$Tmax - params$Tdif * cos(pi * x/1440)^2, 0, 1440)
S <- y
S <- y
Temp <- params$Tmax - params$Tdif * cos(pi * t[1]/1440)^2
Temp
rho <- exp(params$ap + params$Bp * Temp)
rho
S
kappa <- exp(params$ak + params$Bk * Temp)
kappa
log(S)
dS <- - rho * kappa * (-log(S))^(1 - 1/kappa) * S
dS
(-log(S))^(1 - 1/kappa)
(1 - 1/kappa)
0^(1 - 1/kappa)
(1 - 1/kappa)
library(deSolve)
y <- 0.9999
t <- seq(0, 720, length(720))
params <- pars
params$Tmax <- Temps.df$Tmax[i]
params$Tdif <- Temps.df$Tdif[i]
out <- rk4(y = y, times = t,
func = weib.ode,
parms = params)
out
S <- y
Temp <- params$Tmax - params$Tdif * cos(pi * t[1]/1440)^2
rho <- exp(params$ap + params$Bp * Temp)
kappa <- exp(params$ak + params$Bk * Temp)
dS <- - rho * kappa * (-log(S))^(1 - 1/kappa) * S
dS
rho
kappa
log(S)
(-log(S))^(1 - 1/kappa)
(1 - 1/kappa)
log(S)
datos
datos <- read.csv("Nicho/Datos/HeV-survival.csv")
datos
View(weib)
pars
p4 <-  weib(Tiempo = seq(0, 40320, len == 100),
Temp = 4, pars = pars)
p4 <-  weib(Tiempo = seq(0, 40320, len = 100),
Temp = 4, pars = pars)
d4 <- subset(datos, Temp == 4)
plot(d4$Time, d4$Temp)
plot(d4$Time, d4$ln.S)
lines(seq(0, 40320, len = 100),
p4)
lines(seq(0, 40320, len = 100),
log(p4))
d22 <- subset(datos, Temp == 22)
d22
p22 <-  weib(Tiempo = seq(0, 40320, len = 100),
Temp = 22, pars = pars)
p22 <-  weib(Tiempo = seq(0, 40320, len = 100),
Temp = 22, pars = pars)
plot(d22$Time, d22$ln.S)
lines(seq(0, 40320, len = 100),
log(p22))
d56 <- subset(datos, Temp == 56)
d56
p56 <-  weib(Tiempo = seq(0, 70, len = 100),
Temp = 56, pars = pars)
plot(d56$Time, d56$ln.S)
lines(seq(0, 70, len = 100),
log(p56))
S <- y
S
Temp <- params$Tmax - params$Tdif * cos(pi * t[1]/1440)^2
Temp
rho <- exp(params$ap + params$Bp * Temp)
rho
kappa <- exp(params$ak + params$Bk * Temp)
kappa
dS <- - rho * kappa * ((-log(S))^(1/kappa))^(kappa-1) * S
dS <- - rho * kappa * ((-log(S))^(1/kappa))^(kappa-1) * S
dS
dS <- - rho * kappa * (-log(S))^(1 - 1/kappa) * S
dS
dS <- - rho * kappa * (-log(S))^(1 - 1/kappa) * (1 - S)
dS
log(S)
60*24*7
datos$Time/10080
