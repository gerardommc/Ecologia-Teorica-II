datos <- read.csv("Nicho/Datos/HeV-survival.csv")
library(ggplot2)
datos
1*7*24*60
datos <- read.csv("Nicho/Datos/HeV-survival.csv")
datos
d.4 <- subset(datos, Temp == 4)
d.22 <- subset(datos, Temp == 4)
d.56 <- subset(datos, Temp == 4)
d.4
d.22
d.56
d.4 <- subset(datos, Temp == 4)
d.22 <- subset(datos, Temp == 22)
d.56 <- subset(datos, Temp == 56)
d.56
ggplot(d.4) + geom_point(aes(x = Time, y = ln.S))
ggplot(d.4) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "lm")
ggplot(d.22) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "lm")
ggplot(d.56) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "lm")
m4 <- nls(ln.S ~ - rho * Time ^ (kappa), data = d.4,
start = list(rho = 1, kappa = 1),
algorithm =  "plinear")
m4 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
algorithm =  "plinear")
root.56 <- sapply(seq(0.1, 1.5, len = 10), function(x){d.56$ln.S^x})
matplot(root.56)
root.56
root.56 <- sapply(seq(0.1, 1.5, len = 10), function(x){(-d.56$ln.S)^x})
root.56
matplot(root.56)
matplot(t(root.56))
matplot(t(-root.56))
root.56 <- sapply(seq(0.01, 1.5, len = 10), function(x){(-d.56$ln.S)^x})
matplot(t(-root.56))
seq(0.01, 1.5, len = 10)
root.56 <- sapply(seq(0.01, 0.15, len = 10), function(x){(-d.56$ln.S)^x})
matplot(t(-root.56))
m22 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
algorithm =  "plinear")
m4 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
algorithm =  "plinear")
fn <- function(par = list(rho, kappa), x){
with(par, - rho * x ^ {kappa})
}
fn <- function(par, x){
rho <- par[1]
kappa <- par[1]
- rho * x ^ {kappa}
}
optim(c(1,1), fn, method = "Nelder-Mead")
optimize(c(1,1), fn, method = "Nelder-Mead")
optimize(fn, c(1,1),  method = "Nelder-Mead")
m4 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
lower = c(0.1, 0.1),
upper = c(1, 1),
algorithm =  "plinear")
m4 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
lower = c(0.1, 0.1),
upper = c(1, 1),
algorithm =  "port")
m4
m4 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
lower = c(0.01, 0.1),
upper = c(1, 1),
algorithm =  "port")
m4
m4 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(1, 1),
algorithm =  "port")
m4
m22 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(1, 1),
algorithm =  "port")
m22
m22 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.22,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(1, 1),
algorithm =  "port")
m22
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
algorithm =  "plinear")
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(1, 1),
algorithm =  "port")
m56
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(1.5, 1.5),
algorithm =  "port")
m56
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(2, 1.5),
algorithm =  "port")
m56
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(3, 1.5),
algorithm =  "port")
m56
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(4, 1.5),
algorithm =  "port")
m56
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(3, 0.1),
upper = c(10, 1.5),
algorithm =  "port")
m56
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(2, 0.1),
upper = c(6, 1.5),
algorithm =  "port")
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(2, 0.1),
upper = c(4, 1.5),
algorithm =  "port")
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.1, 0.1),
upper = c(4, 1.5),
algorithm =  "port")
m56
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.1, 0.1),
upper = c(4.5, 1.5),
algorithm =  "port")
m56
plot(m4)
plot(m22)
plot(m56)
profile(m4)
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.1, 0.1),
upper = c(5, 1.5),
algorithm =  "port")
m56
m56 <- nls(ln.S ~ - rho * Time ^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.1, 0.1),
upper = c(4.5, 1.5),
algorithm =  "port")
m56
coef(m4)
coef <- data.frame(rbind(coef(m4), coef(m22), coef(56)))
coef <- data.frame(rbind(coef(m4), coef(m22), coef(m56)))
coef
par.estim$Temp <-c(4, 22, 56)
par.estim <- data.frame(rbind(coef(m4), coef(m22), coef(m56)))
par.estim$Temp <-c(4, 22, 56)
par.estim
par.estim.l <- reshape2::melt(par.estim, id.vars = Temp)
par.estim.l <- reshape2::melt(par.estim, id.vars = "Temp")
par.estim.l
ggplot(par.estim) + geom_point(aes(x = Temp, y = value)) +
facet_wrap(~variable)
ggplot(par.estim) + geom_point(aes(x = Temp, y = value)) +
facet_wrap("~variable")
ggplot(par.estim.l) + geom_point(aes(x = Temp, y = value)) +
facet_wrap("~variable")
datos <- read.csv("Nicho/Datos/HeV-survival.csv")
d.4 <- subset(datos, Temp == 4)
d.22 <- subset(datos, Temp == 22)
d.56 <- subset(datos, Temp == 56)
library(ggplot2)
ggplot(d.4) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "lm")
ggplot(d.22) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "loess")
ggplot(d.56) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "loess")
datos <- read.csv("Nicho/Datos/HeV-survival.csv")
d.4 <- subset(datos, Temp == 4)
d.22 <- subset(datos, Temp == 22)
d.56 <- subset(datos, Temp == 56)
library(ggplot2)
ggplot(d.4) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "lm")
ggplot(d.22) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "loess")
ggplot(d.56) + geom_point(aes(x = Time, y = ln.S)) +
geom_smooth(aes(x = Time, y = ln.S), method = "loess")
m4 <- nls(ln.S ~ -( rho * Time )^ (kappa),
data = d.4,
start = list(rho = 1, kappa = 0.9),
lower = c(0.00001, 0.1),
upper = c(1, 1),
algorithm =  "port")
m22 <- nls(ln.S ~ -( rho * Time )^ (kappa),
data = d.22,
start = list(rho = 1, kappa = 0.9),
lower = c(0.0001, 0.1),
upper = c(1, 1),
algorithm =  "port")
m56 <- nls(ln.S ~ -( rho * Time )^ (kappa),
data = d.56,
start = list(rho = 1, kappa = 0.9),
lower = c(0.1, 0.1),
upper = c(105, 1.5),
algorithm =  "port")
par.estim <- data.frame(rbind(coef(m4), coef(m22), coef(m56)))
par.estim$Temp <-c(4, 22, 56)
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(rho)))
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(kappa)))
par.estim
m.rho <- lm(log(rho) ~ Temp, data = par.estim)
m.kappa <- lm(log(kappa) ~ Temp, data = par.estim)
par(mfrow = c(2,2))
plot(m.rho)
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(rho))) +
geom_smooth(aes(x = Temp, y = log(rho)))
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(rho))) +
geom_smooth(aes(x = Temp, y = log(rho)), method = "lm")
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(kappa))) +
geom_smooth(aes(x = Temp, y = log(kappa)), method = "lm")
m.kappa <- lm(log(kappa) ~ Temp + Temp^2, data = par.estim)
par(mfrow = c(2,2))
plot(m.kappa)
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(kappa))) +
geom_smooth(aes(x = Temp, y = log(kappa)), method = "lm", formula = log(kappa) ~ Temp + Temp^2)
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(kappa))) +
geom_smooth(aes(x = Temp, y = log(kappa)), method = "lm", formula = log(kappa) ~ Temp + I(Temp)^2)
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(kappa))) +
geom_smooth(aes(x = Temp, y = log(kappa)), method = "lm", formula = "log(kappa) ~ Temp + I(Temp)^2")
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(kappa))) +
geom_smooth(aes(x = Temp, y = log(kappa), formula = log(kappa) ~ Temp + I(Temp)^2), method = "lm")
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(kappa))) +
geom_smooth(aes(x = Temp, y = log(kappa)), method = "lm")
ggplot(par.estim) + geom_point(aes(x = Temp, y = (kappa))) +
geom_smooth(aes(x = Temp, y = (kappa)), method = "lm")
ggplot(par.estim) + geom_point(aes(x = Temp, y = log(kappa))) +
geom_smooth(aes(x = Temp, y = log(kappa)), method = "lm")
rho.coef <- coef(m.rho)
kappa.coef <- coef(m.kappa)
rho.coef
kappa.coef
knitr::opts_chunk$set(echo = TRUE)
rho.coef
m.rho <- lm(log(rho) ~ Temp, data = par.estim)
m.kappa <- lm(log(kappa) ~ Temp + Temp^2, data = par.estim)
par(mfrow = c(2,2))
plot(m.rho)
plot(m.kappa)
rho.coef <- coef(m.rho)
kappa.coef <- coef(m.kappa)
coef.pk <- data.frame(par = c("ap", "Bp", "ak", "Bk"),
valor = c(rho.coef, kappa.coef))
knitr::kable(coef.pk)
datos.nuevos <- expand.grid(Tiempo = seq(0, 1000, len = 100),
Temp = seq(4, 56, len = 100))
knitr::kable(head(datos.nuevos))
weib <- function(Tiempo = NA, Temp = NA, pars = NA){
ap <- pars$ap
Bp <- pars$Bp
ak <- pars$ak
Bk <- pars$Bk
p <- exp(ap + Bp * Temp)
k <- exp(ak + Bk * Temp)
S <- exp(- (p * Tiempo) ^ k)
return(S)
}
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
preds <- weib(Tiempo = datos.nuevos$Tiempo,
Temp = datos.nuevos$Temp,
pars = )
preds <- weib(Tiempo = datos.nuevos$Tiempo,
Temp = datos.nuevos$Temp,
pars = pars)
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
Sup <- weib(Tiempo = datos.nuevos$Tiempo,
Temp = datos.nuevos$Temp,
pars = pars)
datos.nuevos$Sup <- Sup
library(lattice)
wireframe(Sup ~ Temp + Tiempo, data = datos.nuevos)
datos.nuevos <- expand.grid(Tiempo = seq(0, 1000, len = 50),
Temp = seq(4, 56, len = 50))
knitr::kable(head(datos.nuevos))
weib <- function(Tiempo = NA, Temp = NA, pars = NA){
ap <- pars$ap
Bp <- pars$Bp
ak <- pars$ak
Bk <- pars$Bk
p <- exp(ap + Bp * Temp)
k <- exp(ak + Bk * Temp)
S <- exp(- (p * Tiempo) ^ k)
return(S)
}
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
Sup <- weib(Tiempo = datos.nuevos$Tiempo,
Temp = datos.nuevos$Temp,
pars = pars)
datos.nuevos$Sup <- Sup
wireframe(Sup ~ Temp + Tiempo, data = datos.nuevos,
drape = T)
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T)
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, arrows = F)
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = T)
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = list(arrows = F))
library(lattice)
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = list(arrows = F),
screen = list(z = 20,
x = -70,
y = 3))
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = list(arrows = F),
screen = list(z = 20,
x = 70,
y = 3))
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = list(arrows = F),
screen = list(z = 20,
x = -10,
y = 3))
wireframe(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T, scales = list(arrows = F),
screen = list(z = 20,
x = 0,
y = 3))
levelplot(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T)
library(lattice)
levelplot(log(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T)
library(lattice)
levelplot(log10(Sup) ~ Temp + Tiempo, data = datos.nuevos,
drape = T)
write.csv(coef.pk, "Nicho/Coeficientes-pk.csv", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
library(terra)
bio1 <- rast("Nicho/Bio1.tif")
coef <- read.csv("Nicho/Coeficientes-pk.csv")
source("Nicho/weibull.R")
library(terra)
bio1 <- rast("Nicho/Bio1.tif")
plot(bio1)
bio1.df <- as.data.frame(bio1, xy = T)
Sup.bio1 <- weib(Tiempo = 720,
Temp = bio1.df$Bio1,
pars = pars)
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
coef <- read.csv("Nicho/Coeficientes-pk.csv") #Importando coeficientes
source("Nicho/weibull.R") #Importando la función
bio1.df <- as.data.frame(bio1, xy = T)
pars <- as.list(coef.pk$valor)
coef.pk <- read.csv("Nicho/Coeficientes-pk.csv") #Importando coeficientes
source("Nicho/weibull.R") #Importando la función
bio1.df <- as.data.frame(bio1, xy = T)
pars <- as.list(coef.pk$valor)
names(pars) <- coef.pk$par
Sup.bio1 <- weib(Tiempo = 720,
Temp = bio1.df$Bio1,
pars = pars)
bio1.df$Sup <- Sup.bio1
Sup.r <- rast(bio1.df[, -3])
plot(Sup.r)
curve(15 + 10 * cos(pi * x)^2, from = 0, to = 12)
curve(15 + 10 * cos(pi * x/12)^2, from = 0, to = 12)
curve(15 + 10 * cos(pi * x/12)^2, from = 0, to = 720)
curve(15 + 10 * cos(pi * x/720)^2, from = 0, to = 720)
curve(15 + 10 * cos(pi * x/360)^2, from = 0, to = 720)
curve(15 + 10 * cos(pi * x/1440)^2, from = 0, to = 720)
curve(15 + 10 * cos(-pi * x/1440)^2, from = 0, to = 720)
curve(15 + 10 * cos(-pi * x/1440)^2, from = 0, to = 720)
curve(cos(pi * x/1440)^2, from = 0, to = 720)
curve(15 + 10 * sin(pi * x/1440)^2, from = 0, to = 720)
curve(15 + 10 * cos(pi/2 * x/1440)^2, from = 0, to = 720)
curve(15 + 10 * cos(pi * x/720)^2, from = 0, to = 720)
curve(35 - 10 * cos(pi * x/1440)^2, from = 0, to = 720)
curve(35 - 10 * cos(pi * x/1440)^2, from = 0, to = 1440)
Tmax <- rast("Nicho/Tmax-01.tif")
Tmin <- rast("Nicho/Tmin-01.tif")
Tdif <- Tmax - Tmin
Tmax.df <- as.data.frame(Tmax, xy = T)
Tdif.df <- as.data.frame(Tdif, xy = F)
head(Tmax.df)
library(doParallel)
registerDoParallel(cores = 24)
nrow(Temps.df)
Tmax <- rast("Nicho/Tmax-01.tif")
Tmin <- rast("Nicho/Tmin-01.tif")
Tdif <- Tmax - Tmin
Tmax.df <- as.data.frame(Tmax, xy = T)
Tdif.df <- as.data.frame(Tdif, xy = F)
Temps.df <- data.frame(Tmax.df, Tdif = Tdif.df$`Tmax-01`)
names(Temps.df) <- c("x", "y", "Tmax", "Tdif")
nrow(Temps.df)
weib.ode <- function(t, y, params){
with(params, {
S <- y
Temp <- Tmax - Tdif * cos(pi * t/1440)^2
rho <- exp(ap + Bp * Temp)
kappa <- exp(ak + Bk * Temp)
dS <- - rho * kappa * (-log(S))^(1 - 1/kappa) * S
list(c(dS))
})
}
i = 1
library(tidyr)
library(doParallel)
registerDoParallel(cores = 24)
params <- pars
params$Tmax <- Temps.df$Tmax[i]
params$Tdif <- Temps.df$Tdif[i]
params
out <- lsoda(y = y, times = t,
func = weib.ode,
parms = params) |> as.data.frame()
library(deSolve)
library(deSolve)
y <- 1
t <- seq(0, 720, length(60))
params <- pars
params$Tmax <- Temps.df$Tmax[i]
params$Tdif <- Temps.df$Tdif[i]
out <- lsoda(y = y, times = t,
func = weib.ode,
parms = params) |> as.data.frame()
out <- lsoda(y = y, times = t,
func = weib.ode,
parms = params)
